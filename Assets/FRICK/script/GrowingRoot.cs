using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;

namespace SplineMesh {
    [ExecuteInEditMode]
    [RequireComponent(typeof(Spline))]
    public class GrowingRoot : MonoBehaviour {
        private GameObject generated;
        private Spline spline;
        private float rate = 0;
        private MeshBender meshBender;

        public Mesh mesh;
        public Material material;
        public Vector3 rotation;
        public Vector3 scale;

        public float startScale = 1;

        public float DurationInSecond;

        private void OnEnable() {
            rate = 0;
            Init();
        }

        private void OnValidate() {
            Init();
        }

        private void Update() {
            EditorUpdate();
        }

        void EditorUpdate() {
            rate += Time.deltaTime / DurationInSecond;
            if (rate > 1) {
                rate --;
                Vector3 mousePosition = Input.mousePosition;
                mousePosition.z = 10;
                Vector3 target = Camera.main.ScreenToWorldPoint(mousePosition);
                //spline.AddNode(new SplineNode(new Vector3(target.x, -target.y, 0), new Vector3(0, -1, 0)));
            }

            float nodeDistance = 0;
            int i = 0;
            foreach (var n in spline.nodes) {
                float nodeScale1 = startScale * rate;
                float nodeScale2 = startScale - (startScale * rate);
                spline.nodes[spline.curves.Count - 1].Scale = new Vector2(nodeScale1, nodeScale1);
                spline.nodes[spline.curves.Count].Scale = new Vector2(nodeScale2, nodeScale2);
                if (i < spline.curves.Count) {
                    nodeDistance += spline.curves[i++].Length;
                }
            }

            if (generated != null) {
                float LastLength = spline.curves[spline.curves.Count - 1].Length;
                Debug.Log(LastLength);
                meshBender.SetInterval(spline, 0, (spline.Length - LastLength) + (LastLength * rate));
                meshBender.ComputeIfNeeded();
            }
        }

        private void Init() {
            string generatedName = "generated by " + GetType().Name;
            var generatedTranform = transform.Find(generatedName);
            generated = generatedTranform != null ? generatedTranform.gameObject : UOUtility.Create(generatedName, gameObject,
                typeof(MeshFilter),
                typeof(MeshRenderer),
                typeof(MeshBender));

            generated.GetComponent<MeshRenderer>().material = material;

            meshBender = generated.GetComponent<MeshBender>();
            spline = GetComponent<Spline>();

            meshBender.Source = SourceMesh.Build(mesh)
                .Rotate(Quaternion.Euler(rotation))
                .Scale(scale);
            meshBender.Mode = MeshBender.FillingMode.StretchToInterval;
            meshBender.SetInterval(spline, 0, 1.00f);
        }
    }
}
